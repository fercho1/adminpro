{"version":3,"file":"progress-bar.d.ts","sources":["progress-bar.d.ts"],"names":[],"mappingssourcesContent":["/*!\r\n * devextreme-angular\r\n * Version: 19.1.11\r\n * Build date: Fri May 15 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';\r\nimport DxProgressBar from 'devextreme/ui/progress_bar';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { DxComponent } from '../core/component';\r\nimport { DxTemplateHost } from '../core/template-host';\r\nimport { NestedOptionHost } from '../core/nested-option';\r\nimport { WatcherHelper } from '../core/watcher-helper';\r\n/**\r\n * The ProgressBar is a widget that shows current progress.\r\n */\r\nexport declare class DxProgressBarComponent extends DxComponent implements OnDestroy, ControlValueAccessor {\r\n    instance: DxProgressBar;\r\n    /**\r\n     * Specifies whether the widget responds to user interaction.\r\n     */\r\n    disabled: boolean;\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    elementAttr: any;\r\n    /**\r\n     * Specifies the widget's height.\r\n     */\r\n    height: number | Function | string;\r\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the widget.\r\n     */\r\n    hint: string;\r\n    /**\r\n     * Specifies whether the widget changes its state when a user pauses on it.\r\n     */\r\n    hoverStateEnabled: boolean;\r\n    /**\r\n     * Specifies whether the editor's value is valid.\r\n     */\r\n    isValid: boolean;\r\n    /**\r\n     * The maximum value the widget can accept.\r\n     */\r\n    max: number;\r\n    /**\r\n     * The minimum value the widget can accept.\r\n     */\r\n    min: number;\r\n    /**\r\n     * Specifies whether the editor is read-only.\r\n     */\r\n    readOnly: boolean;\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    rtlEnabled: boolean;\r\n    /**\r\n     * Specifies whether or not the widget displays a progress status.\r\n     */\r\n    showStatus: boolean;\r\n    /**\r\n     * Specifies a format for the progress status.\r\n     */\r\n    statusFormat: Function | string;\r\n    /**\r\n     * Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option.\r\n     */\r\n    validationError: any;\r\n    /**\r\n     * Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed.\r\n     */\r\n    validationMessageMode: string;\r\n    /**\r\n     * The current widget value.\r\n     */\r\n    value: number;\r\n    /**\r\n     * Specifies whether the widget is visible.\r\n     */\r\n    visible: boolean;\r\n    /**\r\n     * Specifies the widget's width.\r\n     */\r\n    width: number | Function | string;\r\n    /**\r\n     * A function that is executed when the value reaches the maximum.\r\n     */\r\n    onComplete: EventEmitter<any>;\r\n    /**\r\n     * A function that is executed when the widget's content is ready and each time the content is changed.\r\n     */\r\n    onContentReady: EventEmitter<any>;\r\n    /**\r\n     * A function that is executed before the widget is disposed of.\r\n     */\r\n    onDisposing: EventEmitter<any>;\r\n    /**\r\n     * A function used in JavaScript frameworks to save the widget instance.\r\n     */\r\n    onInitialized: EventEmitter<any>;\r\n    /**\r\n     * A function that is executed after a widget option is changed.\r\n     */\r\n    onOptionChanged: EventEmitter<any>;\r\n    /**\r\n     * A function that is executed after the widget's value is changed.\r\n     */\r\n    onValueChanged: EventEmitter<any>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    disabledChange: EventEmitter<boolean>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    elementAttrChange: EventEmitter<any>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    heightChange: EventEmitter<number | Function | string>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    hintChange: EventEmitter<string>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    hoverStateEnabledChange: EventEmitter<boolean>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    isValidChange: EventEmitter<boolean>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    maxChange: EventEmitter<number>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    minChange: EventEmitter<number>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    readOnlyChange: EventEmitter<boolean>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    rtlEnabledChange: EventEmitter<boolean>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    showStatusChange: EventEmitter<boolean>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    statusFormatChange: EventEmitter<Function | string>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    validationErrorChange: EventEmitter<any>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    validationMessageModeChange: EventEmitter<string>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    valueChange: EventEmitter<number>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    visibleChange: EventEmitter<boolean>;\r\n    /**\r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n     */\r\n    widthChange: EventEmitter<number | Function | string>;\r\n    onBlur: EventEmitter<any>;\r\n    change(_: any): void;\r\n    touched: (_: any) => void;\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);\r\n    protected _createInstance(element: any, options: any): DxProgressBar;\r\n    writeValue(value: any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    registerOnChange(fn: (_: any) => void): void;\r\n    registerOnTouched(fn: () => void): void;\r\n    _createWidget(element: any): void;\r\n    ngOnDestroy(): void;\r\n}\r\nexport declare class DxProgressBarModule {\r\n}\r\n"]}