/*!
 * devextreme-angular
 * Version: 19.1.11
 * Build date: Fri May 15 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import DxRangeSelector from 'devextreme/viz/range_selector';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent } from '../core/component';
import { DxTemplateHost } from '../core/template-host';
import { NestedOptionHost } from '../core/nested-option';
import { WatcherHelper } from '../core/watcher-helper';
import { IterableDifferHelper } from '../core/iterable-differ-helper';
/**
 * The RangeSelector is a widget that allows a user to select a range of values on a scale.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './nested/background';
import * as ɵngcc2 from './nested/image';
import * as ɵngcc3 from './nested/behavior';
import * as ɵngcc4 from './nested/chart';
import * as ɵngcc5 from './nested/common-series-settings';
import * as ɵngcc6 from './nested/aggregation';
import * as ɵngcc7 from './nested/area';
import * as ɵngcc8 from './nested/border';
import * as ɵngcc9 from './nested/hover-style';
import * as ɵngcc10 from './nested/hatching';
import * as ɵngcc11 from './nested/label';
import * as ɵngcc12 from './nested/connector';
import * as ɵngcc13 from './nested/point';
import * as ɵngcc14 from './nested/height';
import * as ɵngcc15 from './nested/url';
import * as ɵngcc16 from './nested/width';
import * as ɵngcc17 from './nested/selection-style';
import * as ɵngcc18 from './nested/reduction';
import * as ɵngcc19 from './nested/value-error-bar';
import * as ɵngcc20 from './nested/bar';
import * as ɵngcc21 from './nested/bubble';
import * as ɵngcc22 from './nested/candlestick';
import * as ɵngcc23 from './nested/fullstackedarea';
import * as ɵngcc24 from './nested/fullstackedbar';
import * as ɵngcc25 from './nested/fullstackedline';
import * as ɵngcc26 from './nested/fullstackedspline';
import * as ɵngcc27 from './nested/fullstackedsplinearea';
import * as ɵngcc28 from './nested/argument-format';
import * as ɵngcc29 from './nested/font';
import * as ɵngcc30 from './nested/format';
import * as ɵngcc31 from './nested/line';
import * as ɵngcc32 from './nested/rangearea';
import * as ɵngcc33 from './nested/rangebar';
import * as ɵngcc34 from './nested/scatter';
import * as ɵngcc35 from './nested/spline';
import * as ɵngcc36 from './nested/splinearea';
import * as ɵngcc37 from './nested/stackedarea';
import * as ɵngcc38 from './nested/stackedbar';
import * as ɵngcc39 from './nested/stackedline';
import * as ɵngcc40 from './nested/stackedspline';
import * as ɵngcc41 from './nested/stackedsplinearea';
import * as ɵngcc42 from './nested/steparea';
import * as ɵngcc43 from './nested/stepline';
import * as ɵngcc44 from './nested/stock';
import * as ɵngcc45 from './nested/data-prepare-settings';
import * as ɵngcc46 from './nested/series-dxi';
import * as ɵngcc47 from './nested/series-template';
import * as ɵngcc48 from './nested/value-axis';
import * as ɵngcc49 from './nested/export';
import * as ɵngcc50 from './nested/indent';
import * as ɵngcc51 from './nested/loading-indicator';
import * as ɵngcc52 from './nested/margin';
import * as ɵngcc53 from './nested/scale';
import * as ɵngcc54 from './nested/aggregation-interval';
import * as ɵngcc55 from './nested/break-dxi';
import * as ɵngcc56 from './nested/break-style';
import * as ɵngcc57 from './nested/marker';
import * as ɵngcc58 from './nested/max-range';
import * as ɵngcc59 from './nested/minor-tick';
import * as ɵngcc60 from './nested/minor-tick-interval';
import * as ɵngcc61 from './nested/min-range';
import * as ɵngcc62 from './nested/tick';
import * as ɵngcc63 from './nested/tick-interval';
import * as ɵngcc64 from './nested/shutter';
import * as ɵngcc65 from './nested/size';
import * as ɵngcc66 from './nested/slider-handle';
import * as ɵngcc67 from './nested/slider-marker';
import * as ɵngcc68 from './nested/title';
import * as ɵngcc69 from './nested/subtitle';
import * as ɵngcc70 from '../core/integration';
import * as ɵngcc71 from '../core/template';
import * as ɵngcc72 from '@angular/platform-browser';
export declare class DxRangeSelectorComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxRangeSelector;
    /**
     * Specifies the options for the range selector's background.
     */
    background: {
        color?: string;
        image?: {
            location?: string;
            url?: string;
        };
        visible?: boolean;
    };
    /**
     * Specifies the RangeSelector's behavior options.
     */
    behavior: {
        allowSlidersSwap?: boolean;
        animationEnabled?: boolean;
        callValueChanged?: string;
        manualRangeSelectionEnabled?: boolean;
        moveSelectedRangeByClick?: boolean;
        snapToTicks?: boolean;
    };
    /**
     * Specifies the options required to display a chart as the range selector's background.
     */
    chart: {
        barGroupPadding?: number;
        barGroupWidth?: number;
        barWidth?: number;
        bottomIndent?: number;
        commonSeriesSettings?: any;
        dataPrepareSettings?: {
            checkTypeForAllData?: boolean;
            convertToAxisDataType?: boolean;
            sortingMethod?: boolean | Function;
        };
        equalBarWidth?: boolean;
        maxBubbleSize?: number;
        minBubbleSize?: number;
        negativesAsZeroes?: boolean;
        palette?: string | Array<string>;
        paletteExtensionMode?: string;
        series?: any | Array<any>;
        seriesTemplate?: {
            customizeSeries?: Function;
            nameField?: string;
        };
        topIndent?: number;
        useAggregation?: boolean;
        valueAxis?: {
            inverted?: boolean;
            logarithmBase?: number;
            max?: number;
            min?: number;
            type?: string;
            valueType?: string;
        };
    };
    /**
     * Specifies the color of the parent page element.
     */
    containerBackgroundColor: string;
    /**
     * Specifies a data source for the scale values and for the chart at the background.
     */
    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>;
    /**
     * Specifies the data source field that provides data for the scale.
     */
    dataSourceField: string;
    /**
     * Specifies whether the widget responds to the user interaction.
     */
    disabled: boolean;
    /**
     * Specifies the attributes to be attached to the widget's root element.
     */
    elementAttr: any;
    /**
     * Configures the exporting and printing features.
     */
    export: {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        proxyUrl?: string;
    };
    /**
     * Range selector's indent options.
     */
    indent: {
        left?: number;
        right?: number;
    };
    /**
     * Configures the loading indicator.
     */
    loadingIndicator: {
        backgroundColor?: string;
        enabled?: boolean;
        font?: DevExpress.viz.Font;
        show?: boolean;
        text?: string;
    };
    /**
     * Generates space around the widget.
     */
    margin: {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    /**
     * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.
     */
    pathModified: boolean;
    /**
     * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.
     */
    redrawOnResize: boolean;
    /**
     * Switches the widget to a right-to-left representation.
     */
    rtlEnabled: boolean;
    /**
     * Specifies options of the range selector's scale.
     */
    scale: {
        aggregationGroupWidth?: number;
        aggregationInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        allowDecimals?: boolean;
        breaks?: Array<DevExpress.viz.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: string;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        endOnTick?: boolean;
        endValue?: Date | number | string;
        holidays?: Array<Date | string | number>;
        label?: {
            customizeText?: Function;
            font?: DevExpress.viz.Font;
            format?: DevExpress.ui.format | string;
            overlappingBehavior?: string;
            topIndent?: number;
            visible?: boolean;
        };
        logarithmBase?: number;
        marker?: {
            label?: {
                customizeText?: Function;
                format?: DevExpress.ui.format | string;
            };
            separatorHeight?: number;
            textLeftIndent?: number;
            textTopIndent?: number;
            topIndent?: number;
            visible?: boolean;
        };
        maxRange?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minorTick?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number;
        minorTickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minRange?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        placeholderHeight?: number;
        showCustomBoundaryTicks?: boolean;
        singleWorkdays?: Array<Date | string | number>;
        startValue?: Date | number | string;
        tick?: {
            color?: string;
            opacity?: number;
            width?: number;
        };
        tickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        type?: string;
        valueType?: string;
        workdaysOnly?: boolean;
        workWeek?: Array<number>;
    };
    /**
     * Specifies the color of the selected range.
     */
    selectedRangeColor: string;
    /**
     * Specifies how the selected range should behave when data is updated. Applies only when the RangeSelector is bound to a data source.
     */
    selectedRangeUpdateMode: string;
    /**
     * Specifies range selector shutter options.
     */
    shutter: {
        color?: string;
        opacity?: number;
    };
    /**
     * Specifies the widget's size in pixels.
     */
    size: {
        height?: number;
        width?: number;
    };
    /**
     * Specifies the appearance of the range selector's slider handles.
     */
    sliderHandle: {
        color?: string;
        opacity?: number;
        width?: number;
    };
    /**
     * Defines the options of the range selector slider markers.
     */
    sliderMarker: {
        color?: string;
        customizeText?: Function;
        font?: DevExpress.viz.Font;
        format?: DevExpress.ui.format | string;
        invalidRangeColor?: string;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        placeholderHeight?: number;
        visible?: boolean;
    };
    /**
     * Sets the name of the theme the widget uses.
     */
    theme: string;
    /**
     * Configures the widget's title.
     */
    title: string | {
        font?: DevExpress.viz.Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number;
        subtitle?: string | {
            font?: DevExpress.viz.Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    };
    /**
     * The selected range (initial or current). Equals the entire scale when not set.
     */
    value: DevExpress.viz.VizRange | Array<number | string | Date>;
    /**
     * A function that is executed before the widget is disposed of.
     */
    onDisposing: EventEmitter<any>;
    /**
     * A function that is executed when the widget's rendering has finished.
     */
    onDrawn: EventEmitter<any>;
    /**
     * A function that is executed after the widget is exported.
     */
    onExported: EventEmitter<any>;
    /**
     * A function that is executed before the widget is exported.
     */
    onExporting: EventEmitter<any>;
    /**
     * A function that is executed before a file with exported widget is saved to the user's local storage.
     */
    onFileSaving: EventEmitter<any>;
    /**
     * A function that is executed when an error or warning occurs.
     */
    onIncidentOccurred: EventEmitter<any>;
    /**
     * A function used in JavaScript frameworks to save the widget instance.
     */
    onInitialized: EventEmitter<any>;
    /**
     * A function that is executed after a widget option is changed.
     */
    onOptionChanged: EventEmitter<any>;
    /**
     * A function that is executed after the widget's value is changed.
     */
    onValueChanged: EventEmitter<any>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    backgroundChange: EventEmitter<{
        color?: string;
        image?: {
            location?: string;
            url?: string;
        };
        visible?: boolean;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    behaviorChange: EventEmitter<{
        allowSlidersSwap?: boolean;
        animationEnabled?: boolean;
        callValueChanged?: string;
        manualRangeSelectionEnabled?: boolean;
        moveSelectedRangeByClick?: boolean;
        snapToTicks?: boolean;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    chartChange: EventEmitter<{
        barGroupPadding?: number;
        barGroupWidth?: number;
        barWidth?: number;
        bottomIndent?: number;
        commonSeriesSettings?: any;
        dataPrepareSettings?: {
            checkTypeForAllData?: boolean;
            convertToAxisDataType?: boolean;
            sortingMethod?: boolean | Function;
        };
        equalBarWidth?: boolean;
        maxBubbleSize?: number;
        minBubbleSize?: number;
        negativesAsZeroes?: boolean;
        palette?: string | Array<string>;
        paletteExtensionMode?: string;
        series?: any | Array<any>;
        seriesTemplate?: {
            customizeSeries?: Function;
            nameField?: string;
        };
        topIndent?: number;
        useAggregation?: boolean;
        valueAxis?: {
            inverted?: boolean;
            logarithmBase?: number;
            max?: number;
            min?: number;
            type?: string;
            valueType?: string;
        };
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    containerBackgroundColorChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    dataSourceFieldChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    disabledChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    elementAttrChange: EventEmitter<any>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    exportChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        proxyUrl?: string;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    indentChange: EventEmitter<{
        left?: number;
        right?: number;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    loadingIndicatorChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        font?: DevExpress.viz.Font;
        show?: boolean;
        text?: string;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    marginChange: EventEmitter<{
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    pathModifiedChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    redrawOnResizeChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    scaleChange: EventEmitter<{
        aggregationGroupWidth?: number;
        aggregationInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        allowDecimals?: boolean;
        breaks?: Array<DevExpress.viz.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: string;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        endOnTick?: boolean;
        endValue?: Date | number | string;
        holidays?: Array<Date | string | number>;
        label?: {
            customizeText?: Function;
            font?: DevExpress.viz.Font;
            format?: DevExpress.ui.format | string;
            overlappingBehavior?: string;
            topIndent?: number;
            visible?: boolean;
        };
        logarithmBase?: number;
        marker?: {
            label?: {
                customizeText?: Function;
                format?: DevExpress.ui.format | string;
            };
            separatorHeight?: number;
            textLeftIndent?: number;
            textTopIndent?: number;
            topIndent?: number;
            visible?: boolean;
        };
        maxRange?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minorTick?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number;
        minorTickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minRange?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        placeholderHeight?: number;
        showCustomBoundaryTicks?: boolean;
        singleWorkdays?: Array<Date | string | number>;
        startValue?: Date | number | string;
        tick?: {
            color?: string;
            opacity?: number;
            width?: number;
        };
        tickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        type?: string;
        valueType?: string;
        workdaysOnly?: boolean;
        workWeek?: Array<number>;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    selectedRangeColorChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    selectedRangeUpdateModeChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    shutterChange: EventEmitter<{
        color?: string;
        opacity?: number;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    sizeChange: EventEmitter<{
        height?: number;
        width?: number;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    sliderHandleChange: EventEmitter<{
        color?: string;
        opacity?: number;
        width?: number;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    sliderMarkerChange: EventEmitter<{
        color?: string;
        customizeText?: Function;
        font?: DevExpress.viz.Font;
        format?: DevExpress.ui.format | string;
        invalidRangeColor?: string;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        placeholderHeight?: number;
        visible?: boolean;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    themeChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    titleChange: EventEmitter<string | {
        font?: DevExpress.viz.Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number;
        subtitle?: string | {
            font?: DevExpress.viz.Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    valueChange: EventEmitter<DevExpress.viz.VizRange | Array<number | string | Date>>;
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxRangeSelector;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxRangeSelectorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxRangeSelectorComponent, "dx-range-selector", never, { "background": "background"; "behavior": "behavior"; "chart": "chart"; "containerBackgroundColor": "containerBackgroundColor"; "dataSource": "dataSource"; "dataSourceField": "dataSourceField"; "disabled": "disabled"; "elementAttr": "elementAttr"; "export": "export"; "indent": "indent"; "loadingIndicator": "loadingIndicator"; "margin": "margin"; "pathModified": "pathModified"; "redrawOnResize": "redrawOnResize"; "rtlEnabled": "rtlEnabled"; "scale": "scale"; "selectedRangeColor": "selectedRangeColor"; "selectedRangeUpdateMode": "selectedRangeUpdateMode"; "shutter": "shutter"; "size": "size"; "sliderHandle": "sliderHandle"; "sliderMarker": "sliderMarker"; "theme": "theme"; "title": "title"; "value": "value"; }, { "onDisposing": "onDisposing"; "onDrawn": "onDrawn"; "onExported": "onExported"; "onExporting": "onExporting"; "onFileSaving": "onFileSaving"; "onIncidentOccurred": "onIncidentOccurred"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onValueChanged": "onValueChanged"; "backgroundChange": "backgroundChange"; "behaviorChange": "behaviorChange"; "chartChange": "chartChange"; "containerBackgroundColorChange": "containerBackgroundColorChange"; "dataSourceChange": "dataSourceChange"; "dataSourceFieldChange": "dataSourceFieldChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "exportChange": "exportChange"; "indentChange": "indentChange"; "loadingIndicatorChange": "loadingIndicatorChange"; "marginChange": "marginChange"; "pathModifiedChange": "pathModifiedChange"; "redrawOnResizeChange": "redrawOnResizeChange"; "rtlEnabledChange": "rtlEnabledChange"; "scaleChange": "scaleChange"; "selectedRangeColorChange": "selectedRangeColorChange"; "selectedRangeUpdateModeChange": "selectedRangeUpdateModeChange"; "shutterChange": "shutterChange"; "sizeChange": "sizeChange"; "sliderHandleChange": "sliderHandleChange"; "sliderMarkerChange": "sliderMarkerChange"; "themeChange": "themeChange"; "titleChange": "titleChange"; "valueChange": "valueChange"; "onBlur": "onBlur"; }, never, never>;
}
export declare class DxRangeSelectorModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxRangeSelectorModule, [typeof DxRangeSelectorComponent], [typeof ɵngcc1.DxoBackgroundModule, typeof ɵngcc2.DxoImageModule, typeof ɵngcc3.DxoBehaviorModule, typeof ɵngcc4.DxoChartModule, typeof ɵngcc5.DxoCommonSeriesSettingsModule, typeof ɵngcc6.DxoAggregationModule, typeof ɵngcc7.DxoAreaModule, typeof ɵngcc8.DxoBorderModule, typeof ɵngcc9.DxoHoverStyleModule, typeof ɵngcc10.DxoHatchingModule, typeof ɵngcc11.DxoLabelModule, typeof ɵngcc12.DxoConnectorModule, typeof ɵngcc13.DxoPointModule, typeof ɵngcc14.DxoHeightModule, typeof ɵngcc15.DxoUrlModule, typeof ɵngcc16.DxoWidthModule, typeof ɵngcc17.DxoSelectionStyleModule, typeof ɵngcc18.DxoReductionModule, typeof ɵngcc19.DxoValueErrorBarModule, typeof ɵngcc20.DxoBarModule, typeof ɵngcc21.DxoBubbleModule, typeof ɵngcc22.DxoCandlestickModule, typeof ɵngcc23.DxoFullstackedareaModule, typeof ɵngcc24.DxoFullstackedbarModule, typeof ɵngcc25.DxoFullstackedlineModule, typeof ɵngcc26.DxoFullstackedsplineModule, typeof ɵngcc27.DxoFullstackedsplineareaModule, typeof ɵngcc28.DxoArgumentFormatModule, typeof ɵngcc29.DxoFontModule, typeof ɵngcc30.DxoFormatModule, typeof ɵngcc31.DxoLineModule, typeof ɵngcc32.DxoRangeareaModule, typeof ɵngcc33.DxoRangebarModule, typeof ɵngcc34.DxoScatterModule, typeof ɵngcc35.DxoSplineModule, typeof ɵngcc36.DxoSplineareaModule, typeof ɵngcc37.DxoStackedareaModule, typeof ɵngcc38.DxoStackedbarModule, typeof ɵngcc39.DxoStackedlineModule, typeof ɵngcc40.DxoStackedsplineModule, typeof ɵngcc41.DxoStackedsplineareaModule, typeof ɵngcc42.DxoStepareaModule, typeof ɵngcc43.DxoSteplineModule, typeof ɵngcc44.DxoStockModule, typeof ɵngcc45.DxoDataPrepareSettingsModule, typeof ɵngcc46.DxiSeriesModule, typeof ɵngcc47.DxoSeriesTemplateModule, typeof ɵngcc48.DxoValueAxisModule, typeof ɵngcc49.DxoExportModule, typeof ɵngcc50.DxoIndentModule, typeof ɵngcc51.DxoLoadingIndicatorModule, typeof ɵngcc52.DxoMarginModule, typeof ɵngcc53.DxoScaleModule, typeof ɵngcc54.DxoAggregationIntervalModule, typeof ɵngcc55.DxiBreakModule, typeof ɵngcc56.DxoBreakStyleModule, typeof ɵngcc57.DxoMarkerModule, typeof ɵngcc58.DxoMaxRangeModule, typeof ɵngcc59.DxoMinorTickModule, typeof ɵngcc60.DxoMinorTickIntervalModule, typeof ɵngcc61.DxoMinRangeModule, typeof ɵngcc62.DxoTickModule, typeof ɵngcc63.DxoTickIntervalModule, typeof ɵngcc64.DxoShutterModule, typeof ɵngcc65.DxoSizeModule, typeof ɵngcc66.DxoSliderHandleModule, typeof ɵngcc67.DxoSliderMarkerModule, typeof ɵngcc68.DxoTitleModule, typeof ɵngcc69.DxoSubtitleModule, typeof ɵngcc70.DxIntegrationModule, typeof ɵngcc71.DxTemplateModule, typeof ɵngcc72.BrowserTransferStateModule], [typeof DxRangeSelectorComponent, typeof ɵngcc1.DxoBackgroundModule, typeof ɵngcc2.DxoImageModule, typeof ɵngcc3.DxoBehaviorModule, typeof ɵngcc4.DxoChartModule, typeof ɵngcc5.DxoCommonSeriesSettingsModule, typeof ɵngcc6.DxoAggregationModule, typeof ɵngcc7.DxoAreaModule, typeof ɵngcc8.DxoBorderModule, typeof ɵngcc9.DxoHoverStyleModule, typeof ɵngcc10.DxoHatchingModule, typeof ɵngcc11.DxoLabelModule, typeof ɵngcc12.DxoConnectorModule, typeof ɵngcc13.DxoPointModule, typeof ɵngcc14.DxoHeightModule, typeof ɵngcc15.DxoUrlModule, typeof ɵngcc16.DxoWidthModule, typeof ɵngcc17.DxoSelectionStyleModule, typeof ɵngcc18.DxoReductionModule, typeof ɵngcc19.DxoValueErrorBarModule, typeof ɵngcc20.DxoBarModule, typeof ɵngcc21.DxoBubbleModule, typeof ɵngcc22.DxoCandlestickModule, typeof ɵngcc23.DxoFullstackedareaModule, typeof ɵngcc24.DxoFullstackedbarModule, typeof ɵngcc25.DxoFullstackedlineModule, typeof ɵngcc26.DxoFullstackedsplineModule, typeof ɵngcc27.DxoFullstackedsplineareaModule, typeof ɵngcc28.DxoArgumentFormatModule, typeof ɵngcc29.DxoFontModule, typeof ɵngcc30.DxoFormatModule, typeof ɵngcc31.DxoLineModule, typeof ɵngcc32.DxoRangeareaModule, typeof ɵngcc33.DxoRangebarModule, typeof ɵngcc34.DxoScatterModule, typeof ɵngcc35.DxoSplineModule, typeof ɵngcc36.DxoSplineareaModule, typeof ɵngcc37.DxoStackedareaModule, typeof ɵngcc38.DxoStackedbarModule, typeof ɵngcc39.DxoStackedlineModule, typeof ɵngcc40.DxoStackedsplineModule, typeof ɵngcc41.DxoStackedsplineareaModule, typeof ɵngcc42.DxoStepareaModule, typeof ɵngcc43.DxoSteplineModule, typeof ɵngcc44.DxoStockModule, typeof ɵngcc45.DxoDataPrepareSettingsModule, typeof ɵngcc46.DxiSeriesModule, typeof ɵngcc47.DxoSeriesTemplateModule, typeof ɵngcc48.DxoValueAxisModule, typeof ɵngcc49.DxoExportModule, typeof ɵngcc50.DxoIndentModule, typeof ɵngcc51.DxoLoadingIndicatorModule, typeof ɵngcc52.DxoMarginModule, typeof ɵngcc53.DxoScaleModule, typeof ɵngcc54.DxoAggregationIntervalModule, typeof ɵngcc55.DxiBreakModule, typeof ɵngcc56.DxoBreakStyleModule, typeof ɵngcc57.DxoMarkerModule, typeof ɵngcc58.DxoMaxRangeModule, typeof ɵngcc59.DxoMinorTickModule, typeof ɵngcc60.DxoMinorTickIntervalModule, typeof ɵngcc61.DxoMinRangeModule, typeof ɵngcc62.DxoTickModule, typeof ɵngcc63.DxoTickIntervalModule, typeof ɵngcc64.DxoShutterModule, typeof ɵngcc65.DxoSizeModule, typeof ɵngcc66.DxoSliderHandleModule, typeof ɵngcc67.DxoSliderMarkerModule, typeof ɵngcc68.DxoTitleModule, typeof ɵngcc69.DxoSubtitleModule, typeof ɵngcc71.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxRangeSelectorModule>;
}

//# sourceMappingURL=range-selector.d.ts.map