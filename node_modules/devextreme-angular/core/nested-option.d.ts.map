{"version":3,"file":"nested-option.d.ts","sources":["nested-option.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\r\n * devextreme-angular\r\n * Version: 19.1.11\r\n * Build date: Fri May 15 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nimport { QueryList, ElementRef, Renderer2, EventEmitter } from '@angular/core';\r\nexport interface INestedOptionContainer {\r\n    instance: any;\r\n    isLinked: boolean;\r\n    optionChangedHandlers: EventEmitter<any>;\r\n}\r\nexport interface IOptionPathGetter {\r\n    (): string;\r\n}\r\nexport declare abstract class BaseNestedOption implements INestedOptionContainer, ICollectionNestedOptionContainer {\r\n    protected _host: INestedOptionContainer;\r\n    protected _hostOptionPath: IOptionPathGetter;\r\n    private _collectionContainerImpl;\r\n    protected _initialOptions: {};\r\n    protected readonly abstract _optionPath: string;\r\n    protected abstract _fullOptionPath(): string;\r\n    constructor();\r\n    protected _optionChangedHandler(e: any): void;\r\n    protected _createEventEmitters(events: any): void;\r\n    protected _getOption(name: string): any;\r\n    protected _setOption(name: string, value: any): void;\r\n    setHost(host: INestedOptionContainer, optionPath: IOptionPathGetter): void;\r\n    setChildren<T extends ICollectionNestedOption>(propertyName: string, items: QueryList<T>): any;\r\n    _filterItems(items: QueryList<BaseNestedOption>): BaseNestedOption[];\r\n    readonly instance: any;\r\n    readonly isLinked: boolean;\r\n    readonly optionChangedHandlers: EventEmitter<any>;\r\n}\r\nexport interface ICollectionNestedOptionContainer {\r\n    setChildren<T extends ICollectionNestedOption>(propertyName: string, items: QueryList<T>): any;\r\n}\r\nexport declare class CollectionNestedOptionContainerImpl implements ICollectionNestedOptionContainer {\r\n    private _setOption;\r\n    private _filterItems;\r\n    private _activatedQueries;\r\n    constructor(_setOption: Function, _filterItems?: Function);\r\n    setChildren<T extends ICollectionNestedOption>(propertyName: string, items: QueryList<T>): void;\r\n}\r\nexport declare abstract class NestedOption extends BaseNestedOption {\r\n    setHost(host: INestedOptionContainer, optionPath: IOptionPathGetter): void;\r\n    protected _fullOptionPath(): string;\r\n}\r\nexport interface ICollectionNestedOption {\r\n    _index: number;\r\n    _value: Object;\r\n}\r\nexport declare abstract class CollectionNestedOption extends BaseNestedOption implements ICollectionNestedOption {\r\n    _index: number;\r\n    protected _fullOptionPath(): string;\r\n    readonly _value: {};\r\n    readonly isLinked: boolean;\r\n}\r\nexport interface IOptionWithTemplate extends BaseNestedOption {\r\n    template: any;\r\n}\r\nexport declare function extractTemplate(option: IOptionWithTemplate, element: ElementRef, renderer: Renderer2, document: any): void;\r\nexport declare class NestedOptionHost {\r\n    private _host;\r\n    private _optionPath;\r\n    getHost(): INestedOptionContainer;\r\n    setHost(host: INestedOptionContainer, optionPath?: IOptionPathGetter): void;\r\n    setNestedOption(nestedOption: BaseNestedOption): void;\r\n}\r\n"]}