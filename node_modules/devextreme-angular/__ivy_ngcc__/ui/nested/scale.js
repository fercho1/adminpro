"use strict";
var Éµngcc0 = require('@angular/core');
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*!
 * devextreme-angular
 * Version: 19.1.11
 * Build date: Fri May 15 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nested_option_1 = require("../../core/nested-option");
var nested_option_2 = require("../../core/nested-option");
var break_dxi_1 = require("./break-dxi");
var DxoScaleComponent = (function (_super) {
    __extends(DxoScaleComponent, _super);
    function DxoScaleComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        return _this;
    }
    Object.defineProperty(DxoScaleComponent.prototype, "allowDecimals", {
        get: function () {
            return this._getOption('allowDecimals');
        },
        set: function (value) {
            this._setOption('allowDecimals', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "customMinorTicks", {
        get: function () {
            return this._getOption('customMinorTicks');
        },
        set: function (value) {
            this._setOption('customMinorTicks', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "customTicks", {
        get: function () {
            return this._getOption('customTicks');
        },
        set: function (value) {
            this._setOption('customTicks', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "endValue", {
        get: function () {
            return this._getOption('endValue');
        },
        set: function (value) {
            this._setOption('endValue', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "label", {
        get: function () {
            return this._getOption('label');
        },
        set: function (value) {
            this._setOption('label', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "minorTick", {
        get: function () {
            return this._getOption('minorTick');
        },
        set: function (value) {
            this._setOption('minorTick', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "minorTickInterval", {
        get: function () {
            return this._getOption('minorTickInterval');
        },
        set: function (value) {
            this._setOption('minorTickInterval', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "orientation", {
        get: function () {
            return this._getOption('orientation');
        },
        set: function (value) {
            this._setOption('orientation', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "scaleDivisionFactor", {
        get: function () {
            return this._getOption('scaleDivisionFactor');
        },
        set: function (value) {
            this._setOption('scaleDivisionFactor', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "startValue", {
        get: function () {
            return this._getOption('startValue');
        },
        set: function (value) {
            this._setOption('startValue', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "tick", {
        get: function () {
            return this._getOption('tick');
        },
        set: function (value) {
            this._setOption('tick', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "tickInterval", {
        get: function () {
            return this._getOption('tickInterval');
        },
        set: function (value) {
            this._setOption('tickInterval', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "horizontalOrientation", {
        get: function () {
            return this._getOption('horizontalOrientation');
        },
        set: function (value) {
            this._setOption('horizontalOrientation', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "verticalOrientation", {
        get: function () {
            return this._getOption('verticalOrientation');
        },
        set: function (value) {
            this._setOption('verticalOrientation', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "aggregationGroupWidth", {
        get: function () {
            return this._getOption('aggregationGroupWidth');
        },
        set: function (value) {
            this._setOption('aggregationGroupWidth', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "aggregationInterval", {
        get: function () {
            return this._getOption('aggregationInterval');
        },
        set: function (value) {
            this._setOption('aggregationInterval', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "breaks", {
        get: function () {
            return this._getOption('breaks');
        },
        set: function (value) {
            this._setOption('breaks', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "breakStyle", {
        get: function () {
            return this._getOption('breakStyle');
        },
        set: function (value) {
            this._setOption('breakStyle', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "categories", {
        get: function () {
            return this._getOption('categories');
        },
        set: function (value) {
            this._setOption('categories', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "endOnTick", {
        get: function () {
            return this._getOption('endOnTick');
        },
        set: function (value) {
            this._setOption('endOnTick', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "holidays", {
        get: function () {
            return this._getOption('holidays');
        },
        set: function (value) {
            this._setOption('holidays', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "logarithmBase", {
        get: function () {
            return this._getOption('logarithmBase');
        },
        set: function (value) {
            this._setOption('logarithmBase', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "marker", {
        get: function () {
            return this._getOption('marker');
        },
        set: function (value) {
            this._setOption('marker', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "maxRange", {
        get: function () {
            return this._getOption('maxRange');
        },
        set: function (value) {
            this._setOption('maxRange', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "minorTickCount", {
        get: function () {
            return this._getOption('minorTickCount');
        },
        set: function (value) {
            this._setOption('minorTickCount', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "minRange", {
        get: function () {
            return this._getOption('minRange');
        },
        set: function (value) {
            this._setOption('minRange', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "placeholderHeight", {
        get: function () {
            return this._getOption('placeholderHeight');
        },
        set: function (value) {
            this._setOption('placeholderHeight', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "showCustomBoundaryTicks", {
        get: function () {
            return this._getOption('showCustomBoundaryTicks');
        },
        set: function (value) {
            this._setOption('showCustomBoundaryTicks', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "singleWorkdays", {
        get: function () {
            return this._getOption('singleWorkdays');
        },
        set: function (value) {
            this._setOption('singleWorkdays', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "type", {
        get: function () {
            return this._getOption('type');
        },
        set: function (value) {
            this._setOption('type', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "valueType", {
        get: function () {
            return this._getOption('valueType');
        },
        set: function (value) {
            this._setOption('valueType', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "workdaysOnly", {
        get: function () {
            return this._getOption('workdaysOnly');
        },
        set: function (value) {
            this._setOption('workdaysOnly', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "workWeek", {
        get: function () {
            return this._getOption('workWeek');
        },
        set: function (value) {
            this._setOption('workWeek', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "_optionPath", {
        get: function () {
            return 'scale';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoScaleComponent.prototype, "breaksChildren", {
        get: function () {
            return this._getOption('breaks');
        },
        set: function (value) {
            this.setChildren('breaks', value);
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    DxoScaleComponent.ctorParameters = function () { return [
        { type: nested_option_1.NestedOptionHost, decorators: [{ type: core_1.SkipSelf }, { type: core_1.Host },] },
        { type: nested_option_1.NestedOptionHost, decorators: [{ type: core_1.Host },] },
    ]; };
    DxoScaleComponent.propDecorators = {
        "allowDecimals": [{ type: core_1.Input },],
        "customMinorTicks": [{ type: core_1.Input },],
        "customTicks": [{ type: core_1.Input },],
        "endValue": [{ type: core_1.Input },],
        "label": [{ type: core_1.Input },],
        "minorTick": [{ type: core_1.Input },],
        "minorTickInterval": [{ type: core_1.Input },],
        "orientation": [{ type: core_1.Input },],
        "scaleDivisionFactor": [{ type: core_1.Input },],
        "startValue": [{ type: core_1.Input },],
        "tick": [{ type: core_1.Input },],
        "tickInterval": [{ type: core_1.Input },],
        "horizontalOrientation": [{ type: core_1.Input },],
        "verticalOrientation": [{ type: core_1.Input },],
        "aggregationGroupWidth": [{ type: core_1.Input },],
        "aggregationInterval": [{ type: core_1.Input },],
        "breaks": [{ type: core_1.Input },],
        "breakStyle": [{ type: core_1.Input },],
        "categories": [{ type: core_1.Input },],
        "endOnTick": [{ type: core_1.Input },],
        "holidays": [{ type: core_1.Input },],
        "logarithmBase": [{ type: core_1.Input },],
        "marker": [{ type: core_1.Input },],
        "maxRange": [{ type: core_1.Input },],
        "minorTickCount": [{ type: core_1.Input },],
        "minRange": [{ type: core_1.Input },],
        "placeholderHeight": [{ type: core_1.Input },],
        "showCustomBoundaryTicks": [{ type: core_1.Input },],
        "singleWorkdays": [{ type: core_1.Input },],
        "type": [{ type: core_1.Input },],
        "valueType": [{ type: core_1.Input },],
        "workdaysOnly": [{ type: core_1.Input },],
        "workWeek": [{ type: core_1.Input },],
        "breaksChildren": [{ type: core_1.ContentChildren, args: [core_1.forwardRef(function () { return break_dxi_1.DxiBreakComponent; }),] },],
    };
DxoScaleComponent.Éµfac = function DxoScaleComponent_Factory(t) { return new (t || DxoScaleComponent)(Éµngcc0.ÉµÉµdirectiveInject(nested_option_1.NestedOptionHost, 5), Éµngcc0.ÉµÉµdirectiveInject(nested_option_1.NestedOptionHost, 1)); };
DxoScaleComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({ type: DxoScaleComponent, selectors: [["dxo-scale"]], contentQueries: function DxoScaleComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        Éµngcc0.ÉµÉµcontentQuery(dirIndex, break_dxi_1.DxiBreakComponent, false);
    } if (rf & 2) {
        var _t;
        Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.breaksChildren = _t);
    } }, inputs: { allowDecimals: "allowDecimals", customMinorTicks: "customMinorTicks", customTicks: "customTicks", endValue: "endValue", label: "label", minorTick: "minorTick", minorTickInterval: "minorTickInterval", orientation: "orientation", scaleDivisionFactor: "scaleDivisionFactor", startValue: "startValue", tick: "tick", tickInterval: "tickInterval", horizontalOrientation: "horizontalOrientation", verticalOrientation: "verticalOrientation", aggregationGroupWidth: "aggregationGroupWidth", aggregationInterval: "aggregationInterval", breaks: "breaks", breakStyle: "breakStyle", categories: "categories", endOnTick: "endOnTick", holidays: "holidays", logarithmBase: "logarithmBase", marker: "marker", maxRange: "maxRange", minorTickCount: "minorTickCount", minRange: "minRange", placeholderHeight: "placeholderHeight", showCustomBoundaryTicks: "showCustomBoundaryTicks", singleWorkdays: "singleWorkdays", type: "type", valueType: "valueType", workdaysOnly: "workdaysOnly", workWeek: "workWeek" }, features: [Éµngcc0.ÉµÉµProvidersFeature([nested_option_1.NestedOptionHost]), Éµngcc0.ÉµÉµInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoScaleComponent_Template(rf, ctx) { }, styles: [""] });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(DxoScaleComponent, [{
        type: core_1.Component,
        args: [{
                selector: 'dxo-scale',
                template: '',
                styles: [''],
                providers: [nested_option_1.NestedOptionHost]
            }]
    }], function () { return [{ type: nested_option_1.NestedOptionHost, decorators: [{
                type: core_1.SkipSelf
            }, {
                type: core_1.Host
            }] }, { type: nested_option_1.NestedOptionHost, decorators: [{
                type: core_1.Host
            }] }]; }, { allowDecimals: [{
            type: core_1.Input
        }], customMinorTicks: [{
            type: core_1.Input
        }], customTicks: [{
            type: core_1.Input
        }], endValue: [{
            type: core_1.Input
        }], label: [{
            type: core_1.Input
        }], minorTick: [{
            type: core_1.Input
        }], minorTickInterval: [{
            type: core_1.Input
        }], orientation: [{
            type: core_1.Input
        }], scaleDivisionFactor: [{
            type: core_1.Input
        }], startValue: [{
            type: core_1.Input
        }], tick: [{
            type: core_1.Input
        }], tickInterval: [{
            type: core_1.Input
        }], horizontalOrientation: [{
            type: core_1.Input
        }], verticalOrientation: [{
            type: core_1.Input
        }], aggregationGroupWidth: [{
            type: core_1.Input
        }], aggregationInterval: [{
            type: core_1.Input
        }], breaks: [{
            type: core_1.Input
        }], breakStyle: [{
            type: core_1.Input
        }], categories: [{
            type: core_1.Input
        }], endOnTick: [{
            type: core_1.Input
        }], holidays: [{
            type: core_1.Input
        }], logarithmBase: [{
            type: core_1.Input
        }], marker: [{
            type: core_1.Input
        }], maxRange: [{
            type: core_1.Input
        }], minorTickCount: [{
            type: core_1.Input
        }], minRange: [{
            type: core_1.Input
        }], placeholderHeight: [{
            type: core_1.Input
        }], showCustomBoundaryTicks: [{
            type: core_1.Input
        }], singleWorkdays: [{
            type: core_1.Input
        }], type: [{
            type: core_1.Input
        }], valueType: [{
            type: core_1.Input
        }], workdaysOnly: [{
            type: core_1.Input
        }], workWeek: [{
            type: core_1.Input
        }], breaksChildren: [{
            type: core_1.ContentChildren,
            args: [core_1.forwardRef(function () { return break_dxi_1.DxiBreakComponent; })]
        }] }); })();
    return DxoScaleComponent;
}(nested_option_2.NestedOption));
exports.DxoScaleComponent = DxoScaleComponent;
var DxoScaleModule = (function () {
    function DxoScaleModule() {
    }
DxoScaleModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: DxoScaleModule });
DxoScaleModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function DxoScaleModule_Factory(t) { return new (t || DxoScaleModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(DxoScaleModule, { declarations: [DxoScaleComponent], exports: [DxoScaleComponent] }); })();
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(DxoScaleModule, [{
        type: core_1.NgModule,
        args: [{
                declarations: [
                    DxoScaleComponent
                ],
                exports: [
                    DxoScaleComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return DxoScaleModule;
}());
exports.DxoScaleModule = DxoScaleModule;

//# sourceMappingURL=scale.js.map