"use strict";
var ɵngcc0 = require('@angular/core');
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*!
 * devextreme-angular
 * Version: 19.1.11
 * Build date: Fri May 15 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nested_option_1 = require("../../core/nested-option");
var popup_options_1 = require("./base/popup-options");
var toolbar_item_dxi_1 = require("./toolbar-item-dxi");
var DxoFilterBuilderPopupComponent = (function (_super) {
    __extends(DxoFilterBuilderPopupComponent, _super);
    function DxoFilterBuilderPopupComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        _this._createEventEmitters([
            { emit: 'heightChange' },
            { emit: 'positionChange' },
            { emit: 'visibleChange' },
            { emit: 'widthChange' }
        ]);
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        return _this;
    }
    Object.defineProperty(DxoFilterBuilderPopupComponent.prototype, "_optionPath", {
        get: function () {
            return 'filterBuilderPopup';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoFilterBuilderPopupComponent.prototype, "toolbarItemsChildren", {
        get: function () {
            return this._getOption('toolbarItems');
        },
        set: function (value) {
            this.setChildren('toolbarItems', value);
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    DxoFilterBuilderPopupComponent.ctorParameters = function () { return [
        { type: nested_option_1.NestedOptionHost, decorators: [{ type: core_1.SkipSelf }, { type: core_1.Host },] },
        { type: nested_option_1.NestedOptionHost, decorators: [{ type: core_1.Host },] },
    ]; };
    DxoFilterBuilderPopupComponent.propDecorators = {
        "heightChange": [{ type: core_1.Output },],
        "positionChange": [{ type: core_1.Output },],
        "visibleChange": [{ type: core_1.Output },],
        "widthChange": [{ type: core_1.Output },],
        "toolbarItemsChildren": [{ type: core_1.ContentChildren, args: [core_1.forwardRef(function () { return toolbar_item_dxi_1.DxiToolbarItemComponent; }),] },],
    };
DxoFilterBuilderPopupComponent.ɵfac = function DxoFilterBuilderPopupComponent_Factory(t) { return new (t || DxoFilterBuilderPopupComponent)(ɵngcc0.ɵɵdirectiveInject(nested_option_1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(nested_option_1.NestedOptionHost, 1)); };
DxoFilterBuilderPopupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxoFilterBuilderPopupComponent, selectors: [["dxo-filter-builder-popup"]], contentQueries: function DxoFilterBuilderPopupComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, toolbar_item_dxi_1.DxiToolbarItemComponent, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toolbarItemsChildren = _t);
    } }, inputs: { accessKey: "accessKey", animation: "animation", closeOnOutsideClick: "closeOnOutsideClick", container: "container", contentTemplate: "contentTemplate", deferRendering: "deferRendering", disabled: "disabled", dragEnabled: "dragEnabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", fullScreen: "fullScreen", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", onContentReady: "onContentReady", onDisposing: "onDisposing", onHidden: "onHidden", onHiding: "onHiding", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResize: "onResize", onResizeEnd: "onResizeEnd", onResizeStart: "onResizeStart", onShowing: "onShowing", onShown: "onShown", onTitleRendered: "onTitleRendered", position: "position", resizeEnabled: "resizeEnabled", rtlEnabled: "rtlEnabled", shading: "shading", shadingColor: "shadingColor", showCloseButton: "showCloseButton", showTitle: "showTitle", tabIndex: "tabIndex", title: "title", titleTemplate: "titleTemplate", toolbarItems: "toolbarItems", visible: "visible", width: "width" }, outputs: { heightChange: "heightChange", positionChange: "positionChange", visibleChange: "visibleChange", widthChange: "widthChange" }, features: [ɵngcc0.ɵɵProvidersFeature([nested_option_1.NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFilterBuilderPopupComponent_Template(rf, ctx) { }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoFilterBuilderPopupComponent, [{
        type: core_1.Component,
        args: [{
                selector: 'dxo-filter-builder-popup',
                template: '',
                styles: [''],
                providers: [nested_option_1.NestedOptionHost],
                inputs: [
                    'accessKey',
                    'animation',
                    'closeOnOutsideClick',
                    'container',
                    'contentTemplate',
                    'deferRendering',
                    'disabled',
                    'dragEnabled',
                    'elementAttr',
                    'focusStateEnabled',
                    'fullScreen',
                    'height',
                    'hint',
                    'hoverStateEnabled',
                    'maxHeight',
                    'maxWidth',
                    'minHeight',
                    'minWidth',
                    'onContentReady',
                    'onDisposing',
                    'onHidden',
                    'onHiding',
                    'onInitialized',
                    'onOptionChanged',
                    'onResize',
                    'onResizeEnd',
                    'onResizeStart',
                    'onShowing',
                    'onShown',
                    'onTitleRendered',
                    'position',
                    'resizeEnabled',
                    'rtlEnabled',
                    'shading',
                    'shadingColor',
                    'showCloseButton',
                    'showTitle',
                    'tabIndex',
                    'title',
                    'titleTemplate',
                    'toolbarItems',
                    'visible',
                    'width'
                ]
            }]
    }], function () { return [{ type: nested_option_1.NestedOptionHost, decorators: [{
                type: core_1.SkipSelf
            }, {
                type: core_1.Host
            }] }, { type: nested_option_1.NestedOptionHost, decorators: [{
                type: core_1.Host
            }] }]; }, { toolbarItemsChildren: [{
            type: core_1.ContentChildren,
            args: [core_1.forwardRef(function () { return toolbar_item_dxi_1.DxiToolbarItemComponent; })]
        }], heightChange: [{
            type: core_1.Output
        }], positionChange: [{
            type: core_1.Output
        }], visibleChange: [{
            type: core_1.Output
        }], widthChange: [{
            type: core_1.Output
        }] }); })();
    return DxoFilterBuilderPopupComponent;
}(popup_options_1.DxoPopupOptions));
exports.DxoFilterBuilderPopupComponent = DxoFilterBuilderPopupComponent;
var DxoFilterBuilderPopupModule = (function () {
    function DxoFilterBuilderPopupModule() {
    }
DxoFilterBuilderPopupModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxoFilterBuilderPopupModule });
DxoFilterBuilderPopupModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxoFilterBuilderPopupModule_Factory(t) { return new (t || DxoFilterBuilderPopupModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxoFilterBuilderPopupModule, { declarations: [DxoFilterBuilderPopupComponent], exports: [DxoFilterBuilderPopupComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoFilterBuilderPopupModule, [{
        type: core_1.NgModule,
        args: [{
                declarations: [
                    DxoFilterBuilderPopupComponent
                ],
                exports: [
                    DxoFilterBuilderPopupComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return DxoFilterBuilderPopupModule;
}());
exports.DxoFilterBuilderPopupModule = DxoFilterBuilderPopupModule;

//# sourceMappingURL=filter-builder-popup.js.map