{"version":3,"file":"transfer-state.js","sources":["transfer-state.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAaA,sCAA8D;AAC9D,0CAAmD;AACnD,iDAAmD;AACnD,yDAA2D;AAC3D,8DAAoG;;;AACpG;AAGuB,IAKnB,qCAAoB,KAAoB,EAA+B;AAAc,QAAjE,UAAK,GAAL,KAAK,CAAe;AAAC,QAA8B,eAAU,GAAV,UAAU;AAAE,QAC/E,IAAI,IAAI,GAAG,IAAI,CAAC;AACxB,QACQ,IAAI,CAAC,MAAM,CAAC;AACpB,YAAY,WAAW,EAAE;AAAc,gBAAL,cAAO;AAAC,qBAAR,UAAO,EAAP,qBAAO,EAAP,IAAO;AACzC,oBADkC,yBAAO;AAAC;AAC3B,gBAAC,IAAI,GAAG,GAAG,+BAAY,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAC1C,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAW,CAAC,CAAC;AAClE,gBACgB,EAAE,CAAC,CAAC,yBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACxD,oBAAoB,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACjE,oBAAoB,MAAM,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,MAAM;AAAI,wBAC3B,IAAI,YAAY,GAAG;AAC3C,4BAA4B,IAAI,EAAE,IAAI;AACtC,4BAA4B,MAAM,EAAE,MAAM;AAC1C,yBAAyB,CAAC;AAC1B,wBAAwB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,YAAmB,CAAC,CAAC;AACjE,qBAAqB,CAAC,CAAC;AACvB,oBAAoB,MAAM,CAAC,MAAM,CAAC;AAClC,iBAAiB;AAAC,gBAAA,IAAI,CAAC,CAAC;AACxB,oBAAoB,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;AACrC,wBAAwB,IAAI,CAAC,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,CAAC;AACxD,wBAAwB,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;AACtE,wBAAwB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAW,CAAC,CAAC;AACzD,wBACwB,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;AAC3C,qBAAqB;AACrB,oBAAoB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC3D,iBAAiB;AACjB,aAAa;AACb,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IACI,iDAAW,GAAX,UAAY,IAAI;AACpB,QAAQ,IAAI,QAAQ,GAAG,EAAE,CAAC;AAC1B,QAAQ,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;AAC/B,YAAY,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;AAChD,gBAAgB,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AACzD,gBAAgB,QAAQ,IAAI,GAAG,GAAG,MAAM,CAAC;AACzC,aAAa;AAAC,YAAA,IAAI,CAAC,CAAC;AACpB,gBAAgB,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AAC5C,aAAa;AACb,SAAS;AACT,QACQ,MAAM,CAAC,QAAQ,CAAC;AACxB,KAAK,CA7CI;AAAC;wCANT,eAAQ,SAAC,hEAMuB;cAL/B,OAAO,EAAE,0BACP,jDAK0D,gBATrD,gCAAa;yCAIQ,sBAC3B,kBACF,jFAN0B,gDASoB,aAAM,SAAC,kBAAW;AAAU;;;;;;;;;;;;;;;;kCAAS;AAAC,sCA1BrF;AAAE;AAyBW,kEAA2B;AAAC","sourcesContent":["/*!\n * devextreme-angular\n * Version: 19.1.11\n * Build date: Fri May 15 2020\n *\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\nimport { PLATFORM_ID, Inject, NgModule } from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\nimport * as ajax from 'devextreme/core/utils/ajax';\r\nimport * as deferred from 'devextreme/core/utils/deferred';\r\nimport { TransferState, makeStateKey, BrowserTransferStateModule } from '@angular/platform-browser';\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserTransferStateModule\r\n  ]\r\n})\r\n\r\nexport class DxServerTransferStateModule {\r\n    constructor(private state: TransferState, @Inject(PLATFORM_ID) private platformId: any) {\r\n        let that = this;\r\n\r\n        ajax.inject({\r\n            sendRequest: function(...args) {\r\n                let key = makeStateKey(that.generateKey(args)),\r\n                    cachedData = that.state.get(key, null as any);\r\n\r\n                if (isPlatformServer(that.platformId)) {\r\n                    let result = this.callBase.apply(this, args);\r\n                    result.always((data, status) => {\r\n                        let dataForCache = {\r\n                            data: data,\r\n                            status: status\r\n                        };\r\n                        that.state.set(key, dataForCache as any);\r\n                    });\r\n                    return result;\r\n                } else {\r\n                    if (cachedData) {\r\n                        let d = new deferred.Deferred();\r\n                        d.resolve(cachedData.data, cachedData.status);\r\n                        that.state.set(key, null as any);\r\n\r\n                        return d.promise();\r\n                    }\r\n                    return this.callBase.apply(this, args);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    generateKey(args) {\r\n        let keyValue = '';\r\n        for (let key in args) {\r\n            if (typeof args[key] === 'object') {\r\n                let objKey = this.generateKey(args[key]);\r\n                keyValue += key + objKey;\r\n            } else {\r\n                keyValue += key + args[key];\r\n            }\r\n        }\r\n\r\n        return keyValue;\r\n    }\r\n }\r\n"]}